use std::convert::Infallible;
use std::str::FromStr;

#[derive(Debug)]
pub struct Input(todo!());

impl aoc::Input for Input \{
    type Answer = todo!();

    fn run_part1(&self) -> Self::Answer \{
        todo!()
    }

    fn run_part2(&self) -> Self::Answer \{
        todo!()
    }
}

impl FromStr for Input \{
    type Err = Infallible;

    fn from_str(value: &str) -> Result<Self, Self::Err> \{
        Ok(Self(
            value.lines().map(|line| line.parse().unwrap()).collect(),
        ))
    }
}

#[cfg(test)]
mod tests \{
    use aoc::Input as _;

    use super::Input;

    fn parse_day_{day}() -> Input \{
        const INPUT: &str = include_str!("../test.txt");
        INPUT.parse().unwrap()
    }

    #[ignore]
    #[test]
    fn run_day_{day}_part_1() \{
        const ANSWER: <Input as aoc::Input>::Answer = todo!();
        assert_eq!(parse_day_{day}().run_part1(), ANSWER);
    }

    #[ignore]
    #[test]
    fn run_day_{day}_part_2() \{
        const ANSWER: <Input as aoc::Input>::Answer = todo!();
        assert_eq!(parse_day_{day}().run_part2(), ANSWER);
    }
}
